// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ToDoList.Infrastructure.Data;

#nullable disable

namespace ToDoList.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250618093755_AddTodoItemAttachments")]
    partial class AddTodoItemAttachments
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8dfc85ca-f780-43b1-b908-97ee9c90ef42"),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("7b858e14-d92d-43e0-afe9-261365d067ad"),
                            Name = "User"
                        });
                });

            modelBuilder.Entity("Entities.TodoItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TodoItems");

                    b.HasData(
                        new
                        {
                            Id = new Guid("db2f25b9-2149-4f75-aca0-f5baab2df9f4"),
                            CreationDate = new DateTime(2025, 6, 18, 12, 37, 55, 87, DateTimeKind.Local).AddTicks(6273),
                            Description = "This is the first task.",
                            DueDate = new DateTime(2025, 6, 19, 12, 37, 55, 87, DateTimeKind.Local).AddTicks(6253),
                            IsCompleted = false,
                            Status = 0,
                            Title = "First Task",
                            UserId = new Guid("44c091c5-be82-4b3f-a9e0-eb195d2e62af")
                        },
                        new
                        {
                            Id = new Guid("4f1790de-f460-409d-8c27-67089bcbed2d"),
                            CreationDate = new DateTime(2025, 6, 18, 12, 37, 55, 87, DateTimeKind.Local).AddTicks(6276),
                            Description = "This is the second task.",
                            DueDate = new DateTime(2025, 6, 20, 12, 37, 55, 87, DateTimeKind.Local).AddTicks(6275),
                            IsCompleted = false,
                            Status = 0,
                            Title = "Second Task",
                            UserId = new Guid("3625e573-9f81-46a1-80f9-1100306169f5")
                        });
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fac962ac-e397-47e2-996f-cc8e728a7f8f"),
                            PasswordHash = "$2a$11$virg5SgyAxzq3xUl7qH53Oxcod0QqeWrnDtH.D5E1KIwjC.s12kgO",
                            RoleId = new Guid("8dfc85ca-f780-43b1-b908-97ee9c90ef42"),
                            Username = "admin"
                        },
                        new
                        {
                            Id = new Guid("44c091c5-be82-4b3f-a9e0-eb195d2e62af"),
                            PasswordHash = "$2a$11$tVXfFCgUj610QSCzgPQpPuYXttwhjb2Zl1CCDZQtffX3Oa/1zL6mC",
                            RoleId = new Guid("7b858e14-d92d-43e0-afe9-261365d067ad"),
                            Username = "user1"
                        },
                        new
                        {
                            Id = new Guid("3625e573-9f81-46a1-80f9-1100306169f5"),
                            PasswordHash = "$2a$11$mG1rLswIIlRWjbFyGz1zGuj/hDT5nxD0MsQhjYdwlUsDmgApyrDca",
                            RoleId = new Guid("7b858e14-d92d-43e0-afe9-261365d067ad"),
                            Username = "user2"
                        },
                        new
                        {
                            Id = new Guid("59dfec42-4c48-407f-b9de-1ab16a845624"),
                            PasswordHash = "$2a$11$r2SBVFohGhkVo0tZH8KHo.VTEyAY7Ffyh.Unf5RnpgSfwp3JD72JS",
                            RoleId = new Guid("7b858e14-d92d-43e0-afe9-261365d067ad"),
                            Username = "user3"
                        });
                });

            modelBuilder.Entity("ToDoList.Core.Entities.Entities.TodoItemAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("TodoItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UploadedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TodoItemId");

                    b.ToTable("TodoItemAttachments");
                });

            modelBuilder.Entity("Entities.Role", b =>
                {
                    b.HasOne("Entities.User", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Entities.TodoItem", b =>
                {
                    b.HasOne("Entities.User", "User")
                        .WithMany("TodoItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.HasOne("Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ToDoList.Core.Entities.Entities.TodoItemAttachment", b =>
                {
                    b.HasOne("Entities.TodoItem", "TodoItem")
                        .WithMany("Attachments")
                        .HasForeignKey("TodoItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TodoItem");
                });

            modelBuilder.Entity("Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Entities.TodoItem", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Navigation("Roles");

                    b.Navigation("TodoItems");
                });
#pragma warning restore 612, 618
        }
    }
}
